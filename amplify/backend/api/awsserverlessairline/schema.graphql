type Flight @model(subscriptions: null) @key(name: "ByDepartureSchedule", fields: ["departureAirportCode", "arrivalAirportCode", "departureDate"], queryField: "getFlightBySchedule") @auth(rules: [{allow: private}]) {
  id: ID!
  departureDate: String!
  departureAirportCode: String!
  departureAirportName: String!
  departureCity: String!
  departureLocale: String!
  arrivalDate: String!
  arrivalAirportCode: String!
  arrivalAirportName: String!
  arrivalCity: String!
  arrivalLocale: String!
  ticketPrice: Int!
  ticketCurrency: String!
  flightNumber: Int!
  seatAllocation: Int
  seatCapacity: Int!
}

type Booking @model(subscriptions: null) @auth(rules: [{allow: owner, ownerField: "customer", identityField: "sub", operations: [read]}, {allow: groups, groups: ["Admin"]}]) @key(name: "ByCustomerStatus", fields: ["customer", "status"], queryField: "getBookingByStatus") {
  id: ID!
  status: BookingStatus!
  outboundFlight: Flight! @connection
  paymentToken: String!
  checkedIn: Boolean
  customer: String
  createdAt: String
  bookingReference: String
}

enum BookingStatus {
  UNCONFIRMED
  CONFIRMED
  CANCELLED
}

input CreateBookingInput {
  id: ID
  status: BookingStatus
  paymentToken: String!
  checkedIn: Boolean
  customer: String
  bookingOutboundFlightId: ID!
}

type Loyalty {
  points: Int
  level: String
  remainingPoints: Int
}

type Mutation {
  processBooking(input: CreateBookingInput!): Booking
}

type Query {
  getLoyalty(customer: String): Loyalty
}
 